#!/usr/bin/env python3
"""
Test para verificar que el problema del rol est√° solucionado
"""
import requests
import json

API_BASE = "https://apidron.sembrandodatos.com"

def test_rol_supervisor_corregido():
    """Test para verificar que ahora s√≠ funciona el rol supervisor"""
    
    print("üîß Test: Verificando correcci√≥n del problema de rol")
    print("=" * 60)
    
    # Crear usuario supervisor
    usuario_supervisor = {
        "nombre": "Test Supervisor Corregido",
        "correo": f"supervisor.corregido.{int(__import__('time').time())}@test.com",
        "curp": f"SUPR{int(__import__('time').time()) % 100:02d}0101HDFABC05",
        "telefono": "+5255123456789",
        "puesto": "Supervisor Jefe",
        "contrasena": "password123",
        "rol": "supervisor"
    }
    
    print("üì§ Creando usuario supervisor:")
    print(json.dumps({**usuario_supervisor, "contrasena": "***"}, indent=2, ensure_ascii=False))
    
    try:
        response = requests.post(
            f"{API_BASE}/usuarios",
            json=usuario_supervisor,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"\nüì• Respuesta servidor:")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Usuario supervisor creado:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            verificar_rol(result.get('id'), 'supervisor')
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_rol_tecnico_corregido():
    """Test para verificar que el t√©cnico sigue funcionando"""
    
    print("\n" + "=" * 60)
    print("üîß Test: Verificando que el rol t√©cnico sigue funcionando")
    
    # Crear usuario t√©cnico
    usuario_tecnico = {
        "nombre": "Test Tecnico Corregido",
        "correo": f"tecnico.corregido.{int(__import__('time').time())}@test.com",
        "curp": f"TECN{int(__import__('time').time()) % 100:02d}0101HDFABC06",
        "telefono": "+5255987654321",
        "puesto": "T√©cnico Senior",
        "contrasena": "password123",
        "rol": "tecnico"
    }
    
    print("üì§ Creando usuario t√©cnico:")
    print(json.dumps({**usuario_tecnico, "contrasena": "***"}, indent=2, ensure_ascii=False))
    
    try:
        response = requests.post(
            f"{API_BASE}/usuarios",
            json=usuario_tecnico,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"\nüì• Respuesta servidor:")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Usuario t√©cnico creado:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            verificar_rol(result.get('id'), 'tecnico')
        else:
            print(f"‚ùå Error: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_rol_vacio():
    """Test para verificar que ahora se rechaza un rol vac√≠o"""
    
    print("\n" + "=" * 60)
    print("üîß Test: Verificando validaci√≥n de rol vac√≠o")
    
    # Crear usuario con rol vac√≠o (deber√≠a fallar)
    usuario_vacio = {
        "nombre": "Test Rol Vacio",
        "correo": f"rolvacio.{int(__import__('time').time())}@test.com",
        "curp": f"VOID{int(__import__('time').time()) % 100:02d}0101HDFABC07",
        "telefono": "+5255111222333",
        "puesto": "Sin Rol",
        "contrasena": "password123",
        "rol": ""  # ROL VAC√çO - deber√≠a fallar
    }
    
    print("üì§ Intentando crear usuario con rol vac√≠o (deber√≠a fallar):")
    
    try:
        response = requests.post(
            f"{API_BASE}/usuarios",
            json=usuario_vacio,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        print(f"üì• Respuesta servidor:")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 400:
            error = response.json()
            print("‚úÖ ¬°Correcto! Se rechaz√≥ el rol vac√≠o:")
            print(json.dumps(error, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå ¬°Error! Deber√≠a haber rechazado el rol vac√≠o")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def verificar_rol(usuario_id, rol_esperado):
    """Verificar el rol guardado"""
    try:
        response = requests.get(f"{API_BASE}/usuarios", timeout=10)
        if response.status_code == 200:
            data = response.json()
            usuarios = data.get('usuarios', data) if isinstance(data, dict) else data
            
            for u in usuarios:
                if u.get('id') == usuario_id:
                    rol_guardado = u.get('rol', 'NO ENCONTRADO')
                    print(f"üîç Verificaci√≥n: Rol guardado = '{rol_guardado}', Esperado = '{rol_esperado}'")
                    
                    if rol_guardado == rol_esperado:
                        print("‚úÖ ¬°CORRECTO! El rol coincide")
                    else:
                        print("‚ùå ¬°ERROR! El rol no coincide")
                    break
    except Exception as e:
        print(f"‚ùå Error verificando: {e}")

if __name__ == "__main__":
    print("üõ†Ô∏è  PRUEBAS DE CORRECCI√ìN DEL PROBLEMA DE ROL")
    print("=" * 70)
    
    # Test 1: Supervisor
    test_rol_supervisor_corregido()
    
    __import__('time').sleep(1)
    
    # Test 2: T√©cnico
    test_rol_tecnico_corregido()
    
    __import__('time').sleep(1)
    
    # Test 3: Validaci√≥n rol vac√≠o
    test_rol_vacio()
    
    print("\n" + "=" * 70)
    print("‚úÖ Todas las pruebas completadas")